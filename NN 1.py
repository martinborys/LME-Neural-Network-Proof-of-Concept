import numpy as np


def sigmoid(x):
    return 1 / (1 + np.exp(-x))


def sigmoid_derivative(x):
    return x * (1 - x)


training_in = np.array([[1, 0, 0, 0, 1, 0, 0, 0, 0],
                       [1, 0, 0, 1, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 1, 0, 0, 0, 0],
                       [0, 1, 0, 1, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 1, 0, 0],
                       [0, 1, 0, 1, 0, 0, 0, 0, 0],
                       [1, 0, 0, 0, 1, 0, 0, 0, 0],
                       [1, 0, 0, 0, 0, 0, 0, 0, 1],
                       [1, 0, 0, 1, 0, 0, 0, 0, 0],
                       [1, 0, 0, 0, 1, 0, 0, 0, 0],
                       [0, 1, 0, 1, 0, 0, 0, 0, 0],
                       [0, 0, 1, 0, 1, 0, 0, 0, 0],
                       [0, 0, 1, 0, 1, 0, 0, 0, 0],
                       [1, 0, 0, 0, 0, 0, 0, 0, 1],
                       [0, 0, 1, 0, 1, 0, 0, 0, 0],
                       [0, 0, 1, 1, 0, 0, 0, 0, 0],
                       [1, 0, 0, 0, 0, 0, 0, 1, 0],
                       [1, 0, 0, 0, 0, 0, 0, 1, 0],
                       [0, 1, 0, 0, 0, 1, 0, 0, 0],
                       [0, 0, 1, 0, 0, 0, 0, 1, 0],
                       [0, 1, 0, 1, 0, 0, 0, 0, 0],
                       [0, 0, 1, 1, 0, 0, 0, 0, 0],
                       [1, 0, 0, 0, 0, 0, 0, 1, 0],
                       [1, 0, 0, 1, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 1, 0, 0, 0],
                       [0, 1, 0, 0, 0, 1, 0, 0, 0],
                       [0, 0, 1, 1, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 1, 0, 0, 0],
                       [0, 0, 1, 1, 0, 0, 0, 0, 0],
                       [0, 0, 1, 1, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 1]])

training_out = np.array([[0.4666666667],
                         [0.221417021],
                         [0.3400211193],
                         [0.2951737953],
                         [0.8],
                         [0.4333819006],
                         [0.344714353],
                         [0.5566065622],
                         [0.154512788],
                         [0.2181015506],
                         [0.6335877863],
                         [0.6112353],
                         [0.3574149722],
                         [0.4444444444],
                         [0.2911153119],
                         [0.1642522844],
                         [0.2857142857],
                         [0.1747172193],
                         [0.275862069],
                         [0.3333333333],
                         [0.2627815253],
                         [0.1558003013],
                         [0.2598496926],
                         [0.1793920365],
                         [0.55],
                         [0.55],
                         [0.1942487265],
                         [0.68],
                         [0.3462343096],
                         [0.4074074074],
                         [0.4159560799]])

np.random.seed(1)

syn_weights = 2 * np.random.random((9, 1)) - 1

print("Random starting syn weights: ")
print(syn_weights)

for i in range(1000):

    input_layer = training_in

    outputs = sigmoid(np.dot(input_layer, syn_weights))

    error = training_out - outputs

    adjustments = error * sigmoid_derivative(outputs)

    syn_weights += np.dot(input_layer.T, adjustments)

print('Synaptic weights after training')
print(syn_weights)
print('Outputs after training: ')
print(outputs)